import{o as n,c as s,d as t,e as l}from"./app.8a8067a6.js";const a='{"title":"","description":"","frontmatter":{},"relativePath":"translation/devto-jseventloop.md","lastUpdated":1622735061721}',e={},o=t("div",{class:"tip custom-block"},[t("p",{class:"custom-block-title"},"TIP"),t("p",null,[l("本篇文章是怀着赞许与尊敬从"),t("a",{href:"https://dev.to/lydiahallie",target:"_blank",rel:"noopener noreferrer"},"Lydia Hallie"),l("的文章中翻译而来的，"),t("a",{href:"https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif",target:"_blank",rel:"noopener noreferrer"},"原文"),l("比这精彩地多")])],-1),u=t("p",null,"事件循环(Event loop)是JavaScript开发人员避不开的一件事，一开始理解起来可能有点困惑(反正我是挺困惑的)。原作者Lydia Hallie是个视觉学习者，以下所有的gif都是她做的，非常生动。",-1),p=t("p",null,"首先，什么是事件循环，你为什么需要了解它？",-1),c=t("p",null,"众所周知，JavaScript是单线程的 : 一次只能运行一个任务。通常来说好像没什么大不了的。但想象一下，你正在运行一项耗时30秒的任务，是的，这个任务耗时30秒，然后才能运行其他任务(默认情况下，JavaScript在浏览器的主线程上运行，因此整个UI界面就“咔”地卡住了)，现在都1202年了，没有人想要一个速度慢、反应迟钝的网站。",-1),i=t("p",null,[l("幸运的是，浏览器为我们提供了JavaScript引擎本身不提供的一些功能：Web API。其中包括 "),t("strong",null,"setTimeout"),l(", DOM API, HTTP API等等。这可以帮助我们创建一些异步，非阻塞行为。")],-1),r=t("p",null,[l("当我们调用一个函数时，它会被添加进 "),t("em",null,"调用栈"),l(" (call stack)里,调用栈是JS引擎的一部分，不是特定于浏览器的，栈是"),t("strong",null,"先进后出"),l("的。当函数返回了值之后，这个函数就会从栈中弹出。")],-1),k=t("p",null,[t("img",{src:"/assets/eventLoop-1.d2a63eb5.gif",alt:"eventLoop-1"})],-1),m=t("p",null,[l("这里先是"),t("em",null,"greet"),l("函数被推进调用栈里，然后返回“Hello”，"),t("strong",null,"当函数返回值了之后，就会从栈中弹出"),l("，因此 "),t("em",null,"greet"),l(" 函数被弹出栈。然后往下执行到 "),t("em",null,"respond"),l(" 函数， "),t("em",null,"respond"),l(" 函数返回一个 "),t("em",null,"setTimeout函数"),l("， 因为这是栈，先进后出，所以会先把 "),t("em",null,"setTimeout"),l(" 函数弹出栈再弹出 "),t("em",null,"respond"),l(" , "),t("em",null,"setTimeout"),l(" 函数是由Web API提供的，它让我们在不阻塞主线程的情况下延迟执行任务。我们传递给 "),t("em",null,"setTimeout"),l(" 的回调函数：箭头函数 "),t("code",null,"() => {return 'Hey'}"),l(" 被添加到Web API. 与此同时， "),t("em",null,"setTimeout"),l(" 函数和 "),t("em",null,"respond"),l(" 函数从堆栈中弹出，它们都返回了自己的值！")],-1),d=t("p",null,[t("img",{src:"/assets/eventLoop-2.f8583611.gif",alt:"eventLoop-2"})],-1),f=t("p",null,[l("在Web API中，有一个计时器，它的运行时间和我们传递给它的第二个参数 1000ms 一样长。回调不会立即添加到调用堆栈中，而是传递给称为"),t("em",null,[t("strong",null,"队列")]),l("的东西。")],-1),v=t("p",null,[t("img",{src:"/assets/eventLoop-3.3d8697da.gif",alt:"eventLoop-3"})],-1),b=t("p",null,[l("这可能是令人困惑的部分：这并不意味着回调函数在1000ms之后被添加到调用栈之中(因此返回值)，尽管若没有上面这张图，看起来就像这样，但是并不是，队列在其中也有它的戏份。而是在1000ms之后回调函数会被添加进 "),t("em",null,"队列"),l(" 。但这是一个队列，函数必须等待被执行。")],-1),g=t("p",null,[l("接下来就来到了我们一直等待的部分..是时候让"),t("em",null,"事件循环"),l("(Event Loop)完成其唯一的任务了：*"),t("em",null,[l("将队列与调用栈联系起来！"),t("em",null,"如果调用栈是空的，也就是说之前所有被调用的函数都已经返回了他们的值并且已经被弹出了调用栈，那么队列中的"),l("第一项")]),l(" 将被添加进调用栈中。在这种情况下，没有调用任何其他函数，这意味着当回调函数是队列中的第一个项目时，调用堆栈为空。")],-1),T=t("p",null,[t("img",{src:"/assets/eventLoop-4.b11ab894.gif",alt:"eventLoop-4"})],-1),L=t("p",null,[l("回调函数被添加进调用栈，被调用并返回一个值，然后从堆栈中弹出。"),t("img",{src:"/assets/eventLoop-5.32cb3660.gif",alt:"eventLoop-5"})],-1),h=t("p",null,"事件循环的整体思想就介绍完了。整理一下就是：**同步执行的函数被运行时会被立刻推进调用栈中，然后执行函数，返回值，最后从调用栈中被弹出。而异步函数会被添加进Web API中，等待设置的时间后会进入队列，一直等待，直到调用栈为空，然后被推入调用栈，返回值，从堆栈中弹出。**接下里看一个例子，运行之前先想想会输出什么结果。",-1),P=t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),l(),t("span",{class:"token function-variable function"},"foo"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"First"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n"),t("span",{class:"token keyword"},"const"),l(),t("span",{class:"token function-variable function"},"bar"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token function"},"setTimeout"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Second"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token number"},"500"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n"),t("span",{class:"token keyword"},"const"),l(),t("span",{class:"token function-variable function"},"baz"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Third"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n\n"),t("span",{class:"token function"},"bar"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n"),t("span",{class:"token function"},"foo"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n"),t("span",{class:"token function"},"baz"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),l("\n")])])],-1),I=t("p",null,"让我们来看看在浏览器运行这段代码时发生了什么：",-1),y=t("p",null,[t("img",{src:"/assets/eventLoop-6.fb98edb7.gif",alt:"eventLoop-6"})],-1),A=t("ol",null,[t("li",null,[l("我们调用了 "),t("em",null,"bar"),l(" 函数。"),t("em",null,"bar"),l(" 函数返回一个 "),t("em",null,"setTimeout"),l(" 函数")]),t("li",null,[l("我们传给 "),t("em",null,"setTimeout"),l(" 的回调函数被添加进Web API, "),t("em",null,"setTimeout"),l(" 函数和 "),t("em",null,"bar"),l(" 被弹出堆栈")]),t("li",null,[l("Web API中的计时器在计时的同时， "),t("em",null,"foo"),l(' 函数被调用并输出 "First". '),t("em",null,"foo"),l(" 返回(undefined), "),t("em",null,"baz"),l(" 被调用，回调函数进入队列")]),t("li",null,[t("em",null,"baz"),l(" 输出 ”Third“. 事件循环在 "),t("em",null,"baz"),l(" 返回值后发现堆栈是空的，于是此时回调函数被添加进堆栈")]),t("li",null,"堆栈输出 “Second”")],-1),S=t("p",null,"于是我们最终得到的结果是:",-1),z=t("div",{class:"language-js"},[t("pre",null,[t("code",null,"First\nThird\nSecond\n")])],-1),W=t("div",{class:"tip custom-block"},[t("p",{class:"custom-block-title"},"TIP"),t("p",null,[l("翻译中添加了一下我自己的理解，并不是完全按照原文翻译的，可能有语句不通或者理解不准确的情况，详细文章可以移步"),t("a",{href:"https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif",target:"_blank",rel:"noopener noreferrer"},"原作者的文章"),l("。")])],-1);e.render=function(t,l,a,e,j,H){return n(),s("div",null,[o,u,p,c,i,r,k,m,d,f,v,b,g,T,L,h,P,I,y,A,S,z,W])};export default e;export{a as __pageData};
