import{o as n,c as s,a}from"./app.ea498c01.js";const t='{"title":"【第3章】语言基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"3.1 语法","slug":"_3-1-语法"},{"level":3,"title":"3.1.1 区分大小写","slug":"_3-1-1-区分大小写"},{"level":3,"title":"3.1.2 标记符","slug":"_3-1-2-标记符"},{"level":3,"title":"3.1.3 注释","slug":"_3-1-3-注释"},{"level":3,"title":"3.1.4 严格模式","slug":"_3-1-4-严格模式"},{"level":3,"title":"3.1.5 语句","slug":"_3-1-5-语句"},{"level":2,"title":"3.2 关键字和保留字","slug":"_3-2-关键字和保留字"},{"level":2,"title":"3.3 变量","slug":"_3-3-变量"},{"level":3,"title":"3.3.1 var关键字","slug":"_3-3-1-var关键字"},{"level":3,"title":"3.3.2 let声明","slug":"_3-3-2-let声明"},{"level":3,"title":"3.3.3 const 声明","slug":"_3-3-3-const-声明"},{"level":3,"title":"3.3.4 声明风格及最佳实践","slug":"_3-3-4-声明风格及最佳实践"},{"level":2,"title":"3.4 数据类型","slug":"_3-4-数据类型"},{"level":3,"title":"3.4.1 typeof 操作符","slug":"_3-4-1-typeof-操作符"},{"level":3,"title":"3.4.2 Undefined 类型","slug":"_3-4-2-undefined-类型"},{"level":3,"title":"3.4.3 Null 类型","slug":"_3-4-3-null-类型"},{"level":3,"title":"3.4.4 Boolean（布尔值） 类型","slug":"_3-4-4-boolean（布尔值）-类型"},{"level":3,"title":"3.4.5 Number 类型","slug":"_3-4-5-number-类型"},{"level":3,"title":"3.4.6 String 类型","slug":"_3-4-6-string-类型"},{"level":3,"title":"3.4.7 Symbol 类型","slug":"_3-4-7-symbol-类型"}],"relativePath":"JsNote/3.md","lastUpdated":1622715349500}',p={},o=a('<h1 id="【第3章】语言基础"><a class="header-anchor" href="#【第3章】语言基础" aria-hidden="true">#</a> 【第3章】语言基础</h1><p>ES5 定义的 ECMAScript，是目前为止实现得最为广泛（即受浏览器支持最好）的一个版本。ES6在浏览器中的实现（即受支持）程度次之。本章主要基于<em><strong>ES6</strong></em></p><h2 id="_3-1-语法"><a class="header-anchor" href="#_3-1-语法" aria-hidden="true">#</a> 3.1 语法</h2><h3 id="_3-1-1-区分大小写"><a class="header-anchor" href="#_3-1-1-区分大小写" aria-hidden="true">#</a> 3.1.1 区分大小写</h3><p>test和Test是两个不同的变量。<em>typeof</em>是关键字不能做变量，但是Typeof可以</p><h3 id="_3-1-2-标记符"><a class="header-anchor" href="#_3-1-2-标记符" aria-hidden="true">#</a> 3.1.2 标记符</h3><p>所谓标识符，就是变量、函数、属性或函数参数的名称。第一个字符必须是一个字母、下划线（_）或美元符号（$）。使用驼峰大小写</p><h3 id="_3-1-3-注释"><a class="header-anchor" href="#_3-1-3-注释" aria-hidden="true">#</a> 3.1.3 注释</h3><div class="language-js"><pre><code><span class="token comment">// 单行注释</span>\n\n<span class="token comment">/*这是多行\n注释*/</span>\n</code></pre></div><h3 id="_3-1-4-严格模式"><a class="header-anchor" href="#_3-1-4-严格模式" aria-hidden="true">#</a> 3.1.4 严格模式</h3><p>在脚本的开头加上<code>&quot;use strict&quot;</code>使用严格模式</p><p>也可以仅仅在函数内部使用</p><div class="language-js"><pre><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token string">&quot;user strict&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// 函数体</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_3-1-5-语句"><a class="header-anchor" href="#_3-1-5-语句" aria-hidden="true">#</a> 3.1.5 语句</h3><p>语句以<code>;</code>结尾，加上分号有利于:</p><ul><li>防止省略造成的问题，比如可以避免输入内容不完整</li><li>开发者通过删除空行来压缩代码</li><li>在某些情况下提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误</li></ul><p>if语句的大括号最好<strong>也不要省略</strong>，哪怕只有一行</p><h2 id="_3-2-关键字和保留字"><a class="header-anchor" href="#_3-2-关键字和保留字" aria-hidden="true">#</a> 3.2 关键字和保留字</h2><p><strong>关键字</strong>: 表示控制语句的开始和结束，或者执行特定的操作。ECMA-262 第 6 版规定的所有关键字如下：</p><div class="language-"><pre><code>break do in typeof \ncase else instanceof var \ncatch export new void \nclass extends return while \nconst finally super with \ncontinue for switch yield \ndebugger function this \ndefault if throw \ndelete import try\n</code></pre></div><p><strong>保留字</strong>: 给将来做关键字用</p><div class="language-"><pre><code> 始终保留: \n        enum \n        \n 严格模式下保留: \n        implements package public \n        interface protected static \n        let private \n        \n模块代码中保留: \n        await\n</code></pre></div><h2 id="_3-3-变量"><a class="header-anchor" href="#_3-3-变量" aria-hidden="true">#</a> 3.3 变量</h2><p>ECMAScript 变量是松散类型的,可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。使用<em>var</em>、<em>const</em> 和 <em>let</em>声明变量</p><h3 id="_3-3-1-var关键字"><a class="header-anchor" href="#_3-3-1-var关键字" aria-hidden="true">#</a> 3.3.1 var关键字</h3><p><em>var</em>声明的范围是 <em><strong>函数作用域</strong></em></p><div class="language-js"><pre><code><span class="token keyword">var</span> message<span class="token punctuation">;</span>\n</code></pre></div><p>定义了一个名为 message 的变量，可以用它保存任何类型的值。此时的值为特殊值<em>undefined</em>.</p><div class="language-js"><pre><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>\n</code></pre></div><p>message 被定义为一个保存字符串值 hi 的变量。像这样初始化变量不会将它标识为字符串类型，只是一个简单的赋值而已</p><blockquote><p>typeof message的值为&quot;string&quot;，所以我不理解这句话的意思</p></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> \nmessage <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 合法，但不推荐</span>\n</code></pre></div><ol><li><p><em>var</em>声明作用域</p><p>使用 <em>var</em> 操作符定义的变量会成为包含它的函数的局部变量。即：在函数内部声明，那作用域就在函数内部，一旦函数被调用结束，变量就会被销毁。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>\n<span class="token punctuation">}</span> \n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错！</span>\n</code></pre></div><p>在函数内部声明但是不带<em>var</em>关键字<b>(不推荐)</b> 以及在函数外部声明，会成为全局变量。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>\n<span class="token punctuation">}</span> \n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hi&quot;</span>\n</code></pre></div><p>定义多个变量，可以在一条语句中用逗号分隔每个变量</p><div class="language-js"><pre><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> \n    found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> \n    age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>\n    salary<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>. <em>var</em>声明提升</p><p>下面的代码不会报错:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div><p>因为使用<em>var</em>声明的变量会<strong>自动提升到函数作用域顶部</strong>.ECMAScript 运行时把它看成等价于如下代码：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> age<span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div><p>这就是<b>“提升”（hoist）</b>也就是把所有变量声明都拉到函数作用域的顶部</p></li></ol><h3 id="_3-3-2-let声明"><a class="header-anchor" href="#_3-3-2-let声明" aria-hidden="true">#</a> 3.3.2 let声明</h3><p>let 声明的范围是<b>块作用域</b></p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt </span>\n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 26 </span>\n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: age 没有定义</span>\n</code></pre></div><p>在这里，age 变量之所以不能在 if 块外部被引用，是因为它的作用域仅限于该块内部，JavaScript 引擎会记录用于变量声明的标识符及其所在的块作用域</p><div class="language-js"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Nicholas&#39; </span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Matt&#39; </span>\n<span class="token punctuation">}</span> \n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30 </span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 26 </span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol><li><p>暂时性死区</p><p><em>let</em> 声明的变量不会在作用域中被提升</p><div class="language-js"><pre><code><span class="token comment">// name 会被提升</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined </span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \n\n<span class="token comment">// age 不会被提升</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError：age 没有定义</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>全局声明</p><p>使用 <em>let</em> 在全局作用域中声明的变量不会成为 <em>window</em> 对象的属性（<em>var</em> 声明的变量则会）</p><div class="language-js"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Matt&#39; </span>\n\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div></li><li><p>条件声明</p><p>如果不确定变量是否已经被声明过:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> \n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> \n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> \n    <span class="token comment">// 假设脚本不确定页面中是否已经声明了同名变量</span>\n    <span class="token comment">// 那它可以假设还没有声明过</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">let</span> name<span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token comment">// name 被限制在 if {} 块的作用域内</span>\n    <span class="token comment">// 因此这个赋值形同全局赋值</span>\n    name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \n    <span class="token keyword">try</span> <span class="token punctuation">{</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 age 没有声明过，则会报错</span>\n    <span class="token punctuation">}</span> \n    <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">let</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n    <span class="token comment">// age 被限制在 catch {}块的作用域内</span>\n    <span class="token comment">// 因此这个赋值形同全局赋值</span>\n    age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><em>条件声明是反模式，不好，最好别用</em></p></li><li><p><em>for</em> 循环中的 <em>let</em> 声明</p><p>在 <em>let</em> 出现之前，<em>for</em> 循环定义的迭代变量会渗透到循环体外部：</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n<span class="token comment">// 循环逻辑</span>\n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre></div><p>因为<em>var</em>声明的范围是函数作用域，上述代码就相当于:</p><div class="language-js"><pre><code><span class="token keyword">var</span> i<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 循环逻辑</span>\n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre></div><p>改成使用 <em>let</em> 之后，这个问题就消失了，因为迭代变量的作用域仅限于 <em>for</em> 循环块内部：</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 循环逻辑</span>\n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: i 没有定义</span>\n</code></pre></div><p>在使用 <em>var</em> 的时候，最常见的问题就是⭐️<em><strong>对迭代变量的奇特声明和修改</strong></em>⭐️(这个很重要哦)：</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 你可能以为会输出 0、1、2、3、4 </span>\n<span class="token comment">// 实际上会输出 5、5、5、5、5</span>\n</code></pre></div><p>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：<strong>5</strong>。当for循环中头部使用var 定义变量i 时，它和循环体中的i 的作用域不是同级作用域，因此当for循环执行完毕后，并不会给每个循环都储存相对应的i的值。（<strong>注意，这种情况只有在循环体执行完时才会发生，直接在循环体中写同步执行的数据，是可以拿到对应的i的值的。也就是这种情况一般发生在循环体中存在执行函数，这个函数的触发执行时机是在for循环执行完毕后</strong>）。因为<em>setTimeout</em>是个异步执行函数,它会先进入MacroTask Queen(宏任务队列),等待在栈中的<code>for (var i = 0; i &lt; 5; ++i)</code>跑完5次。由于i是使用<em>var</em>声明的，i的值由0变为1，由1变为2，最终为5，此时才轮到<em>setTimeout</em>函数执行，因此输出出来的自然都是5。</p><p>而在使用 <em>let</em> 声明迭代变量时，JavaScript 引擎在后台会<b>为每个迭代循环声明一个新的迭代变量</b>。每个 <em>setTimeout</em> 引用的都是<b>不同的变量实例</b></p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 会输出 0、1、2、3、4</span>\n</code></pre></div><p>这种每次迭代声明一个独立变量实例的行为适用于所有风格的 <em>for</em> 循环，包括 <em>for-in</em> 和 <em>for-of</em> 循环</p><h3 id="_3-3-3-const-声明"><a class="header-anchor" href="#_3-3-3-const-声明" aria-hidden="true">#</a> 3.3.3 const 声明</h3><p><em>const</em> 声明的范围是<b>块作用域</b>。</p><p><em>const</em> 的行为与 <em>let</em> 基本相同，唯一一个重要的区别是用它声明变量时<strong>必须同时初始化变量</strong>，且尝试修改 <em>const</em> 声明的变量会导致运行时错误(这也就说明了不能用 <em>const</em> 来声明迭代变量)。</p><div class="language-js"><pre><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> \nage <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: 给常量赋值</span>\n\n<span class="token comment">// const 声明的作用域也是块</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> \n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt</span>\n</code></pre></div><p><em>const</em> 声明的限制只适用于<b>它指向的变量的引用</b>。换句话说，如果 <em>const</em> 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 <em>const</em> 的限制。</p><div class="language-js"><pre><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> \nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre></div><p>不过，如果你只想用 <em>const</em> 声明一个不会被修改的 <em>for</em> 循环变量，那也是可以的。也就是说，每次迭代只是<b>创建一个新变量</b>。这对 <em>for-of</em> 和 <em>for-in</em> 循环特别有意义：</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// a, b </span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1, 2, 3, 4, 5</span>\n</code></pre></div><blockquote><p>其实不是很理解上述代码，先记着可以这么用吧。这里用let也行呀</p></blockquote></li></ol><h3 id="_3-3-4-声明风格及最佳实践"><a class="header-anchor" href="#_3-3-4-声明风格及最佳实践" aria-hidden="true">#</a> 3.3.4 声明风格及最佳实践</h3><ul><li>不使用 <em>var</em></li><li><em>const</em> 优先，<em>let</em> 次之</li></ul><h2 id="_3-4-数据类型"><a class="header-anchor" href="#_3-4-数据类型" aria-hidden="true">#</a> 3.4 数据类型</h2><p>ECMAScript 有 6 种简单数据类型：</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symboll（符号）是 ECMAScript 6 新增的</li></ul><p>和 1 种复杂数据类型:</p><ul><li>Object(对象:一种<b>无序键值对</b>的集合)</li></ul><h3 id="_3-4-1-typeof-操作符"><a class="header-anchor" href="#_3-4-1-typeof-操作符" aria-hidden="true">#</a> 3.4.1 typeof 操作符</h3><p>用来确定任意变量的数据类型，对一个值使用 typeof 操作符会返回下列字符串之一：</p><ul><li><p>&quot;undefined&quot;表示值未定义；</p></li><li><p>&quot;boolean&quot;表示值为布尔值；</p></li><li><p>&quot;string&quot;表示值为字符串；</p></li><li><p>&quot;number&quot;表示值为数值；</p></li><li><p>&quot;object&quot;表示值为对象（而不是函数）<strong>或 null</strong>，因为特殊值 null 被认为是一个对空对象的引用；</p></li><li><p>&quot;function&quot;表示值为函数；</p></li><li><p>&quot;symbol&quot;表示值为符号。</p></li></ul><h3 id="_3-4-2-undefined-类型"><a class="header-anchor" href="#_3-4-2-undefined-类型" aria-hidden="true">#</a> 3.4.2 <strong>Undefined</strong> 类型</h3><p><strong>Undefined</strong> 类型只有一个值，就是特殊值 <em>undefined</em>。当使用 <em>var</em> 或 <em>let</em> 声明了变量但没有初始化时，就相当于给变量赋予了 <em>undefined</em> 值</p><div class="language-js"><pre><code><span class="token keyword">let</span> message<span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> message2 <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 不必要</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message2 <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一般来说，永远不用显式地给某个变量设置 <em>undefined</em> 值。字面值 <em>undefined</em>主要用于比较，而且在 ECMA-262 第 3 版之前是不存在的。</p><p>增加这个特殊值的目的就是为了正式明确空对象指针（<em>null</em>）和未初始化变量的区别。</p></div><p>包含 <em>undefined</em> 值的变量跟未定义变量是有区别的:</p><div class="language-js"><pre><code><span class="token keyword">let</span> message<span class="token punctuation">;</span> <span class="token comment">// 这个变量被声明了，只是值为 undefined </span>\n\n<span class="token comment">// 确保没有声明过这个变量</span>\n<span class="token comment">// let age </span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>\n</code></pre></div><p>对未定义的变量只能对它调用 <em>typeof</em>，返回的结果是<code>&quot;undefined&quot;</code>，但对未声明的变量调用它时，返回的结果还是<code>&quot;undefined&quot;</code>，这就有点让人看不懂了。比如下面的例子：</p><div class="language-js"><pre><code><span class="token keyword">let</span> message<span class="token punctuation">;</span> <span class="token comment">// 这个变量被声明了，只是值为 undefined </span>\n\n<span class="token comment">// 确保没有声明过这个变量</span>\n<span class="token comment">// let age </span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>\n</code></pre></div><p>不过情况就是这么个情况，咱也没办法。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>即使未初始化的变量会被自动赋予 undefined 值，但我们仍然建议在声明变量的同时进行初始化。这样，当 typeof 返回&quot;undefined&quot;时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。</p></div><h3 id="_3-4-3-null-类型"><a class="header-anchor" href="#_3-4-3-null-类型" aria-hidden="true">#</a> 3.4.3 <strong>Null</strong> 类型</h3><p>只有一个特殊值<em>null</em>，<em>null</em> 值表示一个空对象指针，这也是给<em>typeof</em> 传一个 <em>null</em> 会返回<code>&quot;object&quot;</code>的原因。</p><div class="language-js"><pre><code><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>\n</code></pre></div><p>在定义将来要保存对象值的变量时，建议使用 <em>null</em> 来初始化，不要使用其他值。</p><p><em>undefined</em> 值是由 <em>null</em> 值派生而来的，因此 ECMA-262 将它们定义为表面上相等：</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><p>但是，<code>==</code>操作符会为了比较，而转换它的操作数，这里会将 <em>null</em> 和 <em>undefined</em> 都转化为false。但是用<code>===</code>就会比较它们的内存地址，就不相等了，后面会详细介绍。</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><p>任何时候，只要变量要保存对象，而当时又没有那个对象可保存，就要用 null 来填充该变量。这样就可以保持 null 是空对象指针的语义，并进一步将其与 undefined 区分开来。</p><h3 id="_3-4-4-boolean（布尔值）-类型"><a class="header-anchor" href="#_3-4-4-boolean（布尔值）-类型" aria-hidden="true">#</a> 3.4.4 <strong>Boolean</strong>（布尔值） 类型</h3><p><em>It&#39;s <strong>true</strong> and <strong>false</strong> all alone</em> ~</p><p>虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应布尔值的等价形式，可以调用 <em>Boolean()</em> 显式地转化为布尔值，在 *if()*语句当中会进行隐式地转化。转化规则取决于数据类型和实际的值。下表总结了不同类型与布尔值之间的转换规则：</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">转换为 <strong>true</strong> 的值</th><th style="text-align:center;">转换为 <strong>false</strong> 的值</th></tr></thead><tbody><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">非空字符串</td><td style="text-align:center;">&quot;&quot;（空字符串）</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">非零数值（包括无穷值）</td><td style="text-align:center;">0、NaN（参见后面的相关内容）</td></tr><tr><td style="text-align:center;">Object</td><td style="text-align:center;">任意对象</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">N/A（不存在）</td><td style="text-align:center;">undefined</td></tr></tbody></table><h3 id="_3-4-5-number-类型"><a class="header-anchor" href="#_3-4-5-number-类型" aria-hidden="true">#</a> 3.4.5 <strong>Number</strong> 类型</h3><p>最基本的数值字面量格式是<em>十进制</em>整数，直接写出来即可：</p><div class="language-js"><pre><code><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>\n</code></pre></div><p>对于<em>八进制</em>字面量(在严格模式下无效)，第一个数字必须是零（0），然后是相应的八进制数字（数值 0~7）。如果字面量中包含的数字超出了应有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数，如下所示：</p><div class="language-js"><pre><code><span class="token keyword">let</span> octalNum1 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 八进制的 56 </span>\n<span class="token keyword">let</span> octalNum2 <span class="token operator">=</span> <span class="token number">079</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成 79 处理</span>\n<span class="token keyword">let</span> octalNum3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span> <span class="token comment">// 无效的八进制值，当成 8 处理</span>\n</code></pre></div><p><em>十六进制</em>字面量，必须让真正的数值前缀 0x（区分大小写），然后是十六进制数字（0~9 以及 A~F）。十六进制数字中的字母大小写均可</p><div class="language-js"><pre><code><span class="token keyword">let</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制 10 </span>\n<span class="token keyword">let</span> hexNum2 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制 31</span>\n</code></pre></div><ol><li><p><strong>浮点值</strong></p><p>数值中必须包含小数点，而且小数点后面必须至少有一个数字</p><div class="language-js"><pre><code><span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> floatNum3 <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">;</span> <span class="token comment">// 有效，但不推荐</span>\n</code></pre></div><p>因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为整数。</p><div class="language-js"><pre><code><span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">;</span> <span class="token comment">// 小数点后面没有数字，当成整数 1 处理</span>\n<span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span> <span class="token comment">// 小数点后面是零，当成整数 10 处理</span>\n</code></pre></div><p>科学记数法：一个数值（整数或浮点数）后跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂。</p><div class="language-js"><pre><code><span class="token keyword">let</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment">// 等于 31250000</span>\n</code></pre></div><p>浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确。一个奇怪的例子：</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 别这么干！</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;You got 0.3.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><strong>值的范围</strong></p><p><em>[Number.MIN_VALUE, NUMBER_MAX_VALUE]</em> 在大多数浏览器中是 <em>[5e-324, 1.797 693 134 862 315 7e+308]</em></p><p>超过这个范围个数值会被自动转换为一个特殊的 +/-Infinity(无穷)值，可用*isFinite()*检测是否是有穷值</p><div class="language-js"><pre><code><span class="token keyword">let</span> result <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 <em>Number.NEGATIVE_INFINITY</em> 和 <em>Number.POSITIVE_INFINITY</em> 也可以获取正、负 Infinity。没错，这两个属性包含的值分别就是-Infinity 和 Infinity</p></div></li><li><p><strong>NaN</strong></p><p>特殊值。意思是&quot;不是数值&quot;(Not a Number),用于表示本来要返回数值的操作失败了（而不是抛出错误）</p><ol><li>任何涉及 <em>NaN</em> 的操作始终返回 <em>NaN</em>（如 <em>NaN/10</em>）</li><li><em>NaN</em> 不等于包括 <em>NaN</em> 在内的任何值</li></ol><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><ol start="3"><li><p><em>isNaN()</em> 函数接收一个参数，可以是任意数据类型，该函数会尝试把它转换为数值,然后判断这个参数是否“不是数值”。</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，10 是数值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，可以转换为数值 10 </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，不可以转换为数值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，可以转换为数值 1</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><em>isNaN()</em> 可以用于测试对象。此时，首先会调用对象的 <em>valueOf()</em> 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 <em>toString()</em> 方法，并测试其返回值。</p></div></li></ol></li><li><p><strong>数值转换</strong></p><p>​ 文字描述太麻烦，直接上例子</p><ol><li><strong>Number()</strong></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN </span>\n<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 </span>\n<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;000011&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11 </span>\n<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token keyword">let</span> num5 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">let</span> num6 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n</code></pre></div><ol start="2"><li><p><strong>parseInt()</strong></p><p>通常在需要得到整数时可以优先使用 <em>parseInt()</em> 函数</p><div class="language-js"><pre><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1234blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234 </span>\n<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN </span>\n<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0xA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10，解释为十六进制整数</span>\n<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22 </span>\n<span class="token keyword">let</span> num5 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;70&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 70，解释为十进制值</span>\n<span class="token keyword">let</span> num6 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0xf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15，解释为十六进制整数</span>\n</code></pre></div><p><em>parseInt()</em> 接受第二个参数，指定转化的进制位，默认是十进制。</p></li><li><p><strong>parseFloat()</strong></p><p>与 <em>parseInt()</em> 函数一个不同之处在于，它始终忽略字符串开头的零，因此十六进制数值始终会返回 0。因为</p><p><em>parseFloat()</em> 只解析十进制值，因此不能指定底数</p><div class="language-js"><pre><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;1234blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234，按整数解析</span>\n<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;0xA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 </span>\n<span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;22.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22.5 </span>\n<span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;22.34.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22.34 </span>\n<span class="token keyword">let</span> num5 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;0908.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 908.5 </span>\n<span class="token keyword">let</span> num6 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.125e7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31250000</span>\n</code></pre></div></li></ol></li></ol><h3 id="_3-4-6-string-类型"><a class="header-anchor" href="#_3-4-6-string-类型" aria-hidden="true">#</a> 3.4.6 <strong>String</strong> 类型</h3><p>文字描述实在太多了，真不想写</p><div class="language-js"><pre><code><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 双引号声明</span>\n<span class="token keyword">let</span> middleName <span class="token operator">=</span> <span class="token string">&#39;Jacob&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 单引号声明</span>\n<span class="token keyword">let</span> fullname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">John </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>middleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token comment">//字符串插值</span>\n\n<span class="token comment">//字符串是不可变的</span>\n<span class="token comment">//要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量</span>\n<span class="token keyword">let</span> fullname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Jones</span><span class="token template-punctuation string">`</span></span>  \n</code></pre></div><ol><li><em>toString()</em> 函数</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> ageAsString <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串&quot;11&quot; </span>\n<span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> foundAsString <span class="token operator">=</span> found<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串&quot;true&quot;</span>\n<span class="token keyword">let</span> value3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>\n<span class="token keyword">let</span> value4<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>\n</code></pre></div><ol start="2"><li><p><em><strong>模板字面量标签函数</strong></em> (New stuff here ！)</p><p><u><em>标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。</em></u></p></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mySimpleTag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> nameExpression<span class="token punctuation">,</span> ageExpression</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 标签函数的第一个参数strings是以 ${} 分割(split)的数组</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [&quot;My name is &quot;, &quot;.My age is &quot;, &quot;&quot;]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameExpression<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// oneo</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ageExpression<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 24</span>\n    \n    <span class="token keyword">return</span> <span class="token string">&quot;finished&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> taggedResult <span class="token operator">=</span> mySimpleTag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taggedResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// finished</span>\n</code></pre></div><p>​ 因为表达式参数的数量是可变的，所以通常应该使用 *剩余操作符（rest operator）*将它们收集到一个数组中：</p><div class="language-js"><pre><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mySimpleTag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>expressions</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 标签函数的第一个参数strings是以 ${} 分割(split)的数组</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [&quot;My name is &quot;, &quot;.My age is &quot;, &quot;&quot;]</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> expression <span class="token keyword">of</span> expressions<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token comment">// oneo</span>\n        <span class="token comment">// 24</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">return</span> <span class="token string">&quot;finished&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> taggedResult <span class="token operator">=</span> mySimpleTag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taggedResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// finished</span>\n</code></pre></div><ol start="3"><li><p>原始字符串</p><p>要想获得不是被转换后的字符表示：</p><ul><li><p>对于字符串，使用 <em>String.raw()</em></p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\u00A9</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// © </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\u00A9</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\u00A9</span>\n</code></pre></div></li><li><p>对于数组，通过对字符串数组的 <em>.raw</em> 属性取得每个字符串的原始内容</p></li></ul></li></ol><h3 id="_3-4-7-symbol-类型"><a class="header-anchor" href="#_3-4-7-symbol-类型" aria-hidden="true">#</a> 3.4.7 <strong>Symbol</strong> 类型</h3><p>**Symbol(符号)**是原始值，用来确保对象属性使用唯一标志符。符号实例是唯一，不可变的</p><ol><li><strong>符号的基本用法</strong></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sym<span class="token punctuation">)</span> <span class="token comment">// symbol  因为符号本身就是原始值</span>\n</code></pre></div><p>可传入一个<em>字符串参数</em>来对符号进行描述。只要创建**Symbol()**实例就能保证唯一性</p><div class="language-js"><pre><code><span class="token keyword">let</span> genericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> otherGenericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> fooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> otherFooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>genericSymbol <span class="token operator">==</span> otherGenericSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooSymbol <span class="token operator">==</span> otherFooSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><p>不能使用<em>new</em>关键词。如果你确实想使用符号包装对象，可以借用 <em>Object()</em> 函数(没啥用，看不懂)</p><div class="language-js"><pre><code><span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Symbol is not a constructor</span>\n\n<span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> myWrappedSymbol <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>mySymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> myWrappedSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>\n</code></pre></div><ol start="2"><li><p>使用全局符号注册表</p><p>如果运行时的确需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号，</p><p>为此，需要使用 <strong>Symbol.for()</strong> 方法:</p><div class="language-js"><pre><code><span class="token keyword">let</span> globalSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新符号,且必须用字符串键来创建</span>\n<span class="token keyword">let</span> otherGlobalSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重用已有符号</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalSymbol <span class="token operator">===</span> otherGlobalSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> localSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localSymbol <span class="token operator">===</span> globalSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false  也是不相同的哦</span>\n</code></pre></div><p>可以使用 <strong>Symbol.keyFor()</strong> 来查询全局注册表，这个方法接受<strong>符号</strong>，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回 undefined。</p><div class="language-js"><pre><code><span class="token comment">// 创建全局符号</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo </span>\n<span class="token comment">// 创建普通符号</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// 如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError：</span>\nSymbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: 123 is not a symbol</span>\n</code></pre></div></li><li><p>使用符号作为属性</p><p>凡是可以使用字符串或数值作为属性的地方，都可以使用符号。</p><div class="language-js"><pre><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    s4 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> \n \t<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;foo val&#39;</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token comment">// 这样也可以：o[s1] = &#39;foo val&#39;; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Symbol(foo): foo val} </span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&#39;bar val&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Symbol(foo): foo val, Symbol(bar): bar val} </span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">{</span> \n <span class="token punctuation">[</span>s3<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&#39;baz val&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> \n <span class="token punctuation">[</span>s4<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&#39;qux val&#39;</span><span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// {Symbol(foo): foo val, Symbol(bar): bar val, </span>\n<span class="token comment">// Symbol(baz): baz val, Symbol(qux): qux val}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n \ts2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> \n    <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;foo val&#39;</span><span class="token punctuation">,</span> \n    <span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;bar val&#39;</span><span class="token punctuation">,</span> \n    baz<span class="token operator">:</span> <span class="token string">&#39;baz val&#39;</span><span class="token punctuation">,</span> \n    qux<span class="token operator">:</span> <span class="token string">&#39;qux val&#39;</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回对象实例的符号属性数组</span>\n<span class="token comment">// [Symbol(foo), Symbol(bar)] </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回对象实例的常规属性数组</span>\n<span class="token comment">// [&quot;baz&quot;, &quot;qux&quot;] </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回同时包含常规和符号属性描述符的对象</span>\n<span class="token comment">// {baz: {...}, qux: {...}, Symbol(foo): {...}, Symbol(bar): {...}} </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回两种类型的键</span>\n<span class="token comment">// [&quot;baz&quot;, &quot;qux&quot;, Symbol(foo), Symbol(bar)]</span>\n</code></pre></div></li><li><p>常用内置符号</p></li></ol>',99);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
