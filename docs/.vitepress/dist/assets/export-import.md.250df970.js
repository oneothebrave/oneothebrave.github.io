import{o as n,c as s,d as a}from"./app.2a123ea2.js";const o='{"title":"概述","description":"","frontmatter":{},"relativePath":"export-import.md","lastUpdated":1622715349500}',t={},p=a('<h1 id="概述"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><blockquote><p><em><strong>module.exports ， exports / require</strong></em> : 只有node支持的导出/引入</p><p><em><strong>export default ， export / import</strong></em> : 只有es支持的导出/引入</p></blockquote><h1 id="module-exports-exports-require"><a class="header-anchor" href="#module-exports-exports-require" aria-hidden="true">#</a> module.exports , exports / require</h1><p>在一个node执行一个文件时，会给这个文件内生成一个 <code>module</code>和<code>exports</code>对象，我们将这两个对象输出，可以看到module这个对象有个exports属性，值是<code>{}</code>。而exports的值也是<code>{}</code>。且两者指向<strong>同一个内存地址</strong>。</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>\n<span class="token comment">/*\nModule {\n  id: &#39;.&#39;,\n  path: &#39;...&#39;,\n  exports: {},\n  parent: null,\n  filename: &#39;...&#39;,\n  loaded: false,\n  children: [],\n  paths: [ ... ]\n}\n*/</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>\n<span class="token comment">// {}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports <span class="token operator">===</span> exports<span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre></div><p>现在来修改下<code>module.exports</code>和<code>exports</code>的值</p><div class="language-js"><pre><code>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment">//{ name: &#39;oneo&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span> <span class="token comment">//{ name: &#39;oneo&#39; }</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;oneo&#39;, age: 24 }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;oneo&#39;, age: 24 }</span>\n</code></pre></div><p>很显然，由于两者指向同一个内存地址，修改其中一个另一个也会发生改变。</p><p>那么使用<code>require</code>引入时，引入的到底是哪个值呢？</p><div class="language-js"><pre><code><span class="token comment">////// unit.js</span>\nexports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>\n<span class="token comment">// exports == module.exports == { name: &#39;oneo&#39;, age: 24 }</span>\nexports <span class="token operator">=</span> <span class="token string">&quot;Demacia&quot;</span> <span class="token comment">// 改变exports的指向</span>\n\n<span class="token comment">////// test.js</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./unit&quot;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;oneo&#39;, age: 24 }</span>\n</code></pre></div><p>我们在<code>unit.js</code>中改变了<code>exports</code>的指向，然后在<code>test.js</code>中将<code>unit.js</code>引入，输出，发现还是 <code>{ name: &#39;oneo&#39;, age: 24 }</code>,没有改变，这是否意味着真正控制模块导出的其实是<code>module.exports</code>呢？</p><p>答案是 : <strong>YES</strong></p><p>来验证一下:</p><div class="language-js"><pre><code><span class="token comment">////// unit.js</span>\nexports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>\n<span class="token comment">// exports == module.exports == { name: &#39;oneo&#39;, age: 24 }</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&quot;Demacia&quot;</span> <span class="token comment">// 改变module.exports的指向</span>\n\n<span class="token comment">////// test.js</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./unit&quot;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Demacia</span>\n</code></pre></div><p>确实，我们修改了<code>module.exports</code>指向的值之后，在另一个js文件中引入的值也发生了变化。说明<em>真正控制模块导出的其实是<code>module.exports</code></em>。也就是说，很不幸，可怜的<code>exports</code>只是个工具人，帮助<code>module.exports</code>操作内存中的数据，累死累活到最后真正被<code>require</code>进去的内容还是<code>module.exports</code>的，而且随时可能被改变指向，改变完指向之后对<code>module.exports</code>来说就没有作用了。像不像你和你的上级 : )</p><p>所以为了引起想不到的麻烦，尽量用<code>module.exports</code>导出,<code>require</code>导入。</p><p>最后一点，如果<code>module.exports</code>的值是个对象，不是基本类型，则<code>require</code>进来的名字要与导出时的名字相同,否则就会是<code>undefined</code>。</p><div class="language-js"><pre><code><span class="token comment">////// unit.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;oneo&quot;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">24</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">////// test.js</span>\n<span class="token comment">//要加{},如果导出单属性对象时不加{}，则require进来的是个对象。这个叫解构</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> agee<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./unit.js&quot;</span><span class="token punctuation">)</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> agee<span class="token punctuation">)</span> <span class="token comment">// oneo undefined</span>\n</code></pre></div><h1 id="export-default-export-import"><a class="header-anchor" href="#export-default-export-import" aria-hidden="true">#</a> export default , export / import</h1><p>这几个就是ES中的导出导入了。首先了解几点：</p><ol><li>export与export default均可用于导出常量、函数、文件、模块等</li><li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li><li>通过export方式导出，在导入时要加{ }，export default则不需要(如果加了，则导出的是个对象，而不是赋的值)</li><li>export能直接导出变量表达式，export default不行。</li></ol><div class="language-js"><pre><code><span class="token comment">////// unit.js</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;oneo&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;running...&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;sleeping...&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> name <span class="token comment">// 第一种导出方式</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>run<span class="token punctuation">,</span> sleep<span class="token punctuation">}</span> <span class="token comment">// 第二种导出方式</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">24</span> <span class="token comment">// 第三种导出方式</span>\n\n\n<span class="token comment">////// test.js</span>\n<span class="token comment">// 由于name是由export default导出的，import的时候可以取任意名字，不一定是name</span>\n<span class="token comment">// 但是由export导出的对象就要与原来的名字相同</span>\n<span class="token keyword">import</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>run <span class="token keyword">as</span> r<span class="token punctuation">,</span> sleep<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./unit.js&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// oneo</span>\n<span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// running...</span>\n<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// sleeping...</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 24</span>\n\n</code></pre></div><p>注意以上代码要在<code>module</code>中运行。</p>',23);t.render=function(a,o,t,e,c,u){return n(),s("div",null,[p])};export default t;export{o as __pageData};
