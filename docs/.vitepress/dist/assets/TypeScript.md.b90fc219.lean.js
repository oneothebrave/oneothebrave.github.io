import{o as n,c as s,a,b as t}from"./app.2a123ea2.js";const o='{"title":"什么是TypeScript?","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. 基本类型变量","slug":"_1-基本类型变量"},{"level":3,"title":"2. array","slug":"_2-array"},{"level":3,"title":"3. object","slug":"_3-object"},{"level":3,"title":"4.any","slug":"_4-any"},{"level":3,"title":"5.function","slug":"_5-function"},{"level":3,"title":"1.获取DOM","slug":"_1-获取dom"},{"level":3,"title":"2.类型转换","slug":"_2-类型转换"},{"level":3,"title":"接口中的泛型","slug":"接口中的泛型"}],"relativePath":"TypeScript.md","lastUpdated":1628061599436}',e={},c=a("h1",{id:"什么是typescript"},[a("a",{class:"header-anchor",href:"#什么是typescript","aria-hidden":"true"},"#"),t(" 什么是TypeScript?")],-1),p=a("p",null,[a("strong",null,"TypeScript"),t(" 就是 "),a("strong",null,"JavaScript"),t(" 的严格超集，提供了静态类别检查，可通过编译转译为 JavaScript 。任何现有JavaScript 程序都是合法的 "),a("strong",null,"TypeScript"),t(" 程序。")],-1),l=a("h1",{id:"安装，编译typescript"},[a("a",{class:"header-anchor",href:"#安装，编译typescript","aria-hidden":"true"},"#"),t(" 安装，编译TypeScript")],-1),u=a("p",null,"全局安装：",-1),i=a("div",{class:"language-shell"},[a("pre",null,[a("code",null,[a("span",{class:"token function"},"npm"),t(),a("span",{class:"token function"},"install"),t(" -g typescript\n")])])],-1),k=a("p",null,[t("编译( "),a("em",null,"tsc"),t(" : "),a("em",null,"typescript compiler"),t(" )：")],-1),r=a("div",{class:"language-"},[a("pre",null,[a("code",null,"// a.ts => a.js\ntsc a.ts\n\n// a.ts => b.js\ntsc --outFile b.js a.ts \n\n// .ts文件修改时就编译  w:watch\ntsc a.ts -w\n")])],-1),d=a("p",null,[t("一般的ts项目中，"),a("code",null,".ts"),t("文件都放在 "),a("em",null,"src"),t(" 文件夹下，编译好的 "),a("code",null,".js"),t("文件和其他一些静态文件都放在 "),a("em",null,"public"),t(" 文件夹下。要想一次性编译所有 "),a("em",null,"src"),t(" 文件夹下的 "),a("code",null,".ts"),t(" 文件到 "),a("em",null,"public"),t(" 文件夹下，可通过在命令行输入:")],-1),m=a("div",{class:"language-shell"},[a("pre",null,[a("code",null,"tsc --init\n")])],-1),g=a("p",null,[t("用来在根目录下生成一个 "),a("code",null,"tsconfig.json"),t(" 配置文件。")],-1),b=a("p",null,[a("img",{src:"/assets/ts-1.222b1272.jpg",alt:"ts-1"})],-1),y=a("p",null,[t("通过更改 "),a("code",null,"tsconfig.json"),t(" 文件中的 "),a("code",null,"rootDir"),t("，可指定需要编译的 "),a("code",null,".ts"),t("文件存放的目录；")],-1),h=a("p",null,[t("通过更改 "),a("code",null,"tsconfig.json"),t(" 文件中的 "),a("code",null,"outDir"),t("，可指定编译完成的 "),a("code",null,".js"),t("文件存放的目录；")],-1),f=a("p",null,[a("img",{src:"/assets/ts-2.9b438d37.jpg",alt:"ts-2"})],-1),w=a("p",null,"配置好之后，直接在命令行输入",-1),v=a("div",{class:"language-shell"},[a("pre",null,[a("code",null,"tsc\n")])],-1),j=a("p",null,"或者",-1),T=a("div",{class:"language-shell"},[a("pre",null,[a("code",null,"tsc -w\n")])],-1),S=a("p",null,[t("来将需要编译的 "),a("code",null,".ts"),t("文件编译成指定目录下的 "),a("code",null,".js"),t("文件。")],-1),O=a("p",null,[t("若你在其他目录下也创建了一个 "),a("code",null,".ts"),t(" 文件，并且不想编译它，你可以在 "),a("code",null,".tsconfig.json"),t(" 加上一个 "),a("code",null,"include"),t("属性来指定 "),a("strong",null,"只编译某个目录下的文件"),t(" ：")],-1),x=a("p",null,[a("img",{src:"/assets/ts-3.675f6358.jpg",alt:"ts-3"})],-1),I=a("h1",{id:"typescript-语法"},[a("a",{class:"header-anchor",href:"#typescript-语法","aria-hidden":"true"},"#"),t(" TypeScript 语法")],-1),_=a("h3",{id:"_1-基本类型变量"},[a("a",{class:"header-anchor",href:"#_1-基本类型变量","aria-hidden":"true"},"#"),t(" 1. 基本类型变量")],-1),$=a("ul",null,[a("li",null,"声明")],-1),D=a("p",null,[t("在 "),a("strong",null,"TypeScript"),t(" 中，可以用 "),a("code",null,"var"),t(","),a("code",null,"let"),t(","),a("code",null,"const"),t(" 来声明变量，编译后为了兼容低版本，一律会转译为 "),a("code",null,"var"),t("。当只想声明一个变量，但不对它进行赋值时，需要先提前指定该变量的类型。这个叫 "),a("em",null,"显式声明类型"),t("。")],-1),M=a("p",null,[t("声明类型的时候用 "),a("code",null,":"),t("，初始化的时候用 "),a("code",null,"=")],-1),R=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// explicit types"),t("\n"),a("span",{class:"token keyword"},"let"),t(" character "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" age "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" isLoggin "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"boolean"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),N=a("p",null,[t("要想让变量可以是两种或若干种类型 --- "),a("strong",null,"union types")],-1),A=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" uid "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},"|"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("  "),a("span",{class:"token comment"},"// 没有括号"),t("\nuid "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'1'"),t("\nuid "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"2"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("uid"),a("span",{class:"token punctuation"},")"),t("  "),a("span",{class:"token comment"},"// 2"),t("\n")])])],-1),E=a("ul",null,[a("li",null,"初始化")],-1),U=a("p",null,"一旦变量的数据类型被指定了，就无法再更改。否则会出现红色波浪下划线，无法编译。例如：",-1),H=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" character "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},";"),t("\ncharacter "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},";"),t("  "),a("span",{class:"token comment"},"// 红色波浪线！ Type 'number' is not assignable to type 'string'"),t("\n")])])],-1),F=a("p",null,[t("给参数指定数据类型，可以在参数后面加 "),a("code",null,":type"),t("来指定，这样传参的时候只能传入已规定类型的参数：")],-1),J=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 通过 参数名:类型 来指定参数的类型"),t("\n"),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"circ"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("diameter"),a("span",{class:"token operator"},":"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" diameter "),a("span",{class:"token operator"},"*"),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token constant"},"PI"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"circ"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"2"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),L=a("h3",{id:"_2-array"},[a("a",{class:"header-anchor",href:"#_2-array","aria-hidden":"true"},"#"),t(" 2. array")],-1),P=a("ul",null,[a("li",null,"声明")],-1),q=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"//array -- 声明了ninjas在未来是个只能存储string类型数据的数组，但还未初始化ninjas，所以没有array的方法(push)"),t("\n"),a("span",{class:"token keyword"},"let"),t(" ninjas "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\n"),a("span",{class:"token comment"},"// ninjas.push('yoh')  // TypeError: Cannot read property 'push' of undefined"),t("\nninjas "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'yoh'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'maok'"),a("span",{class:"token punctuation"},"]"),t("  "),a("span",{class:"token comment"},"// 由于声明了string类型，所以数组中只能出现string类型的数据"),t("\n\n"),a("span",{class:"token keyword"},"let"),t(" ninjas2 "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\nninjas2"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'yoh'"),a("span",{class:"token punctuation"},")"),t("  "),a("span",{class:"token comment"},"// 由于ninjas2不仅声明了在未来是个只能存储string类型数据的数组，但声明了ninjs2是个数组，所以有数组的方法"),t("\n")])])],-1),C=a("p",null,[t("声明混合数据类型的array --- "),a("strong",null,"union types")],-1),W=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" ninjas3 "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},"|"),a("span",{class:"token builtin"},"number"),a("span",{class:"token operator"},"|"),t("object"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("  "),a("span",{class:"token comment"},"// 有括号"),t("\nninjas3 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),a("span",{class:"token string"},"'yoh'"),a("span",{class:"token punctuation"},","),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),a("span",{class:"token string"},"'2'"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"]"),t("\nninjas3"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'joj'"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),B=a("ul",null,[a("li",null,"初始化")],-1),X=a("p",null,"初始化方式和JS相同，不同的是初始化完成之后，所做的操作仅限于对array中已有的数据类型的操作：",-1),z=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// names中只有string类型，所以添加或修改的只能是string类型；以此类推"),t("\n"),a("span",{class:"token keyword"},"let"),t(" names "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'luigi'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'yoshi'"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t("\nnames"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'toad'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token comment"},"// names.push(3); // 红色波浪线! Argument of type 'number' is not assignable to parameter of type 'string'."),t("\n"),a("span",{class:"token comment"},"// names[0] = 3;  // 红色波浪线! Type 'number' is not assignable to type 'string'."),t("\n\n\n"),a("span",{class:"token comment"},"// mixed当中有string，number，boolean类型，所以添加或修改的包括但仅限于这三种类型"),t("\n"),a("span",{class:"token keyword"},"let"),t(" mixed "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'tosh'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'mojave'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"8"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'moko'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"7"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token boolean"},"false"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\nmixed"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"9"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token comment"},"// mixed.push([1,2]) // 红色波浪线!"),t("\n\n")])])],-1),K=a("p",null,"可通过重新赋值成为另一个array",-1),V=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[t("names "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\nmixed "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\n\n"),a("span",{class:"token comment"},"// 能包括的数据类型也只限于刚开始拥有的数据类型"),t("\nnames "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'one'"),a("span",{class:"token punctuation"},"]"),t("\nmixed "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'mixed'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"4"),a("span",{class:"token punctuation"},"]"),t("   \n")])])],-1),G=a("h3",{id:"_3-object"},[a("a",{class:"header-anchor",href:"#_3-object","aria-hidden":"true"},"#"),t(" 3. object")],-1),Q=a("ul",null,[a("li",null,"声明")],-1),Y=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 声明了ninja类型为object，所以任何类型为object的都可为ninja赋值"),t("\n"),a("span",{class:"token keyword"},"let"),t(" ninja "),a("span",{class:"token operator"},":"),t(" object"),a("span",{class:"token punctuation"},";"),t("\nninja "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},","),t(" beltColor"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'black'"),a("span",{class:"token punctuation"},"}"),t("\nninja "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\n\n"),a("span",{class:"token comment"},"// 不仅声明了ninja2类型为object，还规定了属性及其类型。初始化时要求必须有相同的结构"),t("\n"),a("span",{class:"token keyword"},"let"),t(" ninja2"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("\n    name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t("\n    age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t("\n    beltColor"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\nninja2 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},","),t(" beltColor"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'black'"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token comment"},"//ninja2 = []  // 红色波浪线！"),t("\n")])])],-1),Z=a("ul",null,[a("li",null,"初始化")],-1),nn=a("p",null,"初始化一个object之后，无法再增加新的属性。修改现有的属性也只能在属性值的同类型之间修改",-1),sn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" ninja "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n    name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t("\n    belt"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'black'"),a("span",{class:"token punctuation"},","),t("\n    age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"20"),t("\n"),a("span",{class:"token punctuation"},"}"),t("；\n"),a("span",{class:"token comment"},"// 红色波浪线! Property 'skills' does not exist on type '{ name: string; belt: string; age: number; }'."),t("\n"),a("span",{class:"token comment"},"// ninja.skills = ['fighting', 'sneaking']  "),t("\nninja"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token comment"},"// ninja.age = 'twenty'  // 红色波浪线! Type 'string' is not assignable to type 'number'."),t("\n\n\n")])])],-1),an=a("p",null,[t("初始化"),a("code",null,"ninja"),t("为object类型之后，自然就不能修改"),a("code",null,"ninja"),t("为其他类型，如 "),a("code",null,"string"),t(","),a("code",null,"number"),t("等。")],-1),tn=a("p",null,"可以重新赋值为另一个object，但是结构要保持相同（而array是没有结构要求的）",-1),on=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// ninja = 'typestring'  // 红色波浪线!"),t("\n\n"),a("span",{class:"token comment"},"// 重新赋值为另一个object， 属性顺序无所谓"),t("\nninja "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n    name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'avan'"),a("span",{class:"token punctuation"},","),t("\n    age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"30"),a("span",{class:"token punctuation"},","),t("\n    belt"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'white'"),a("span",{class:"token punctuation"},","),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 但是结构一定要与原来相同"),t("\n"),a("span",{class:"token comment"},"// ninja = {  // 红色波浪线!"),t("\n"),a("span",{class:"token comment"},"//     name: 'mario',"),t("\n"),a("span",{class:"token comment"},"//     belt: 'black',"),t("\n"),a("span",{class:"token comment"},"// }  "),t("\n")])])],-1),en=a("h3",{id:"_4-any"},[a("a",{class:"header-anchor",href:"#_4-any","aria-hidden":"true"},"#"),t(" 4.any")],-1),cn=a("p",null,[t("当变量的类型被指定为 "),a("strong",null,"any"),t(" 时，那这个变量的类型就可以变来变去了")],-1),pn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" character"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"any"),a("span",{class:"token punctuation"},";"),t("\ncharacter "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'malong'"),t("\ncharacter "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"1"),t("\ncharacter "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\n\n"),a("span",{class:"token keyword"},"let"),t(" mixed "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token builtin"},"any"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"5"),a("span",{class:"token punctuation"},")"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'cc'"),a("span",{class:"token punctuation"},")"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token boolean"},"false"),a("span",{class:"token punctuation"},")"),t("\nmixed"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n\n"),a("span",{class:"token keyword"},"let"),t(" ninjs "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"any"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"any"),a("span",{class:"token punctuation"},"}"),t(" \nninjs "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"25"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'lo'"),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token comment"},"// 属性值可以是任何值，但是总体的结构不能改变（无法增删改）"),t("\n")])])],-1),ln=a("h3",{id:"_5-function"},[a("a",{class:"header-anchor",href:"#_5-function","aria-hidden":"true"},"#"),t(" 5.function")],-1),un=a("ul",null,[a("li",null,"声明")],-1),kn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" greet"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"Function"),a("span",{class:"token punctuation"},";"),t("  "),a("span",{class:"token comment"},"// 注意声明function的时候是大写的F"),t("\n")])])],-1),rn=a("ul",null,[a("li",null,"初始化")],-1),dn=a("ol",null,[a("li",null,[a("p",null,"不带参数"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"greet"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n\t"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'hello'"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n")])])])]),a("li",null,[a("p",null,"带参数"),a("ul",null,[a("li",null,"参数类型相同")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"add"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n\t"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a "),a("span",{class:"token operator"},"+"),t(" b"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token function"},"add"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n")])])]),a("ul",null,[a("li",null,"参数类型不同")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"add"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),a("span",{class:"token builtin"},"number"),t(),a("span",{class:"token operator"},"|"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token comment"},"// 红色波浪线！ Operator '+' cannot be applied to types 'number' and 'string | number'"),t("\n\t"),a("span",{class:"token comment"},"// console.log(a + b) "),t("\n  "),a("span",{class:"token comment"},"// 我的理解是typescript是严格模式的javascript，现在a+b不能确定是30还是1020，所以报错。"),t("\n  \n  "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token punctuation"},")"),t("\n  "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("b"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token function"},"add"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n")])])]),a("ul",null,[a("li",null,"可选参数")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"add"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" c"),a("span",{class:"token operator"},"?"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a "),a("span",{class:"token operator"},"+"),t(" b"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("c"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token function"},"add"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"50"),a("span",{class:"token punctuation"},")"),t("\n")])])]),a("ul",null,[a("li",null,"可选参数带默认值")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"add"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" c"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"100"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a "),a("span",{class:"token operator"},"+"),t(" b"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("c"),a("span",{class:"token punctuation"},")"),t("\n  "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token function"},"add"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},")"),t("\n")])])])]),a("li",null,[a("p",null,"返回值"),a("p",null,[t("返回值的类型是确定的。可以在参数的括号后面添加 "),a("code",null,":type"),t(" 来指定。")]),a("p",null,"若不显式指定，则返回值类型会根据参数的类型来决定；"),a("p",null,"若指定了类型，则返回值类型就是指定的类型"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(" add "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" a "),a("span",{class:"token operator"},"+"),t(" b\n  "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" result "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"add"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("result"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 30"),t("\n\n"),a("span",{class:"token comment"},"// result = '30'  // 红色波浪线！ result的数据类型为number,无法修改"),t("\n")])])]),a("p",null,[t("像上面那些只有 "),a("code",null,"console.log()"),t("的，没有返回值的函数，返回值是 "),a("code",null,"void"),t("，因此下面两个是等价的：")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"minus"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a "),a("span",{class:"token operator"},"-"),t(" b"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])]),a("p",null,"与"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(" minus "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"void"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("a "),a("span",{class:"token operator"},"-"),t(" b"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])]),a("p",null,[a("code",null,"void"),t(" 就像 JS 当中的 "),a("code",null,"undefined")])])],-1),mn=a("h1",{id:"类型匿名"},[a("a",{class:"header-anchor",href:"#类型匿名","aria-hidden":"true"},"#"),t(" 类型匿名")],-1),gn=a("p",null,"有下面两个相似的函数：",-1),bn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"greet"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("user"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},"|"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," says its id is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("uid"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"greetAgain"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("user"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},"|"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," says its id is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("uid"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," again!"),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),yn=a("p",null,[t("可以看到，两个函数都要传入一个参数 "),a("em",null,"user"),t(" ，这个参数是一个对象。两个函数基本相同，而且参数很长，写起来很麻烦，这个时候就要用到 "),a("strong",null,"类型匿名"),t(" , 关键词是 "),a("code",null,"type")],-1),hn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"type"),t(),a("span",{class:"token class-name"},"StringOrNum"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"|"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"type"),t(),a("span",{class:"token class-name"},"objWidhName"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token operator"},":"),t(" StringOrNum"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"greet"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("user"),a("span",{class:"token operator"},":"),t(" objWidhName"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," says its id is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("user"),a("span",{class:"token punctuation"},"."),t("uid"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),fn=a("h1",{id:"函数签名"},[a("a",{class:"header-anchor",href:"#函数签名","aria-hidden":"true"},"#"),t(" 函数签名")],-1),wn=a("p",null,"从前面我们知道了，这样可以声明一个函数：",-1),vn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" greet "),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"Function"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),jn=a("p",null,[t("但这仅仅只是声明了 "),a("code",null,"greet"),t(" 是个函数，没有规定其他的东西。")],-1),Tn=a("p",null,[a("strong",null,"函数签名"),t(" 就是不仅声明这个是函数，也规定了这个函数的参数个数，类型，返回值等结构。本质上我觉得是一个 "),a("em",null,[a("strong",null,"接口")])],-1),Sn=a("ol",null,[a("li",null,[a("p",null,"函数无返回值"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 函数签名，确定了参数个数及其类型，返回值"),t("\n"),a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token function-variable function"},"greet"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token keyword"},"void"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token function-variable function"},"greet"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," says age is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("age"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token function"},"greet"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'anna'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},")"),t("\n")])])]),a("p",null,[t("这里，声明了 "),a("code",null,"greet"),t(" 首先是个函数，然后它携带2个参数：1个string类型，1个number类型。这个函数的返回值是 "),a("code",null,"void"),t("，既没有返回值。")]),a("p",null,[t("初始化具体函数的时候，参数名不一定与声明时相同（"),a("em",null,"a"),t(", "),a("em",null,"b"),t(" 只是表明这里有2个参数，取什么名字无所谓，随便取），但是类型一定要相同，然后不能有返回值。")])]),a("li",null,[a("p",null,"函数有返回值"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token function-variable function"},"greet"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" b"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token function-variable function"},"greet"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("num1"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(" num2"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" num1 "),a("span",{class:"token operator"},"+"),t(" num2\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])]),a("p",null,[t("这里，声明了 "),a("code",null,"greet"),t(" 首先是个函数，然后它携带2个参数：都是number类型。这个函数的返回值是 "),a("code",null,"number"),t("。")]),a("p",null,[t("初始化具体函数的时候，可以显式地在参数的括号后面加上 "),a("code",null,":number"),t("，来显式地告诉开发员返回的类型，也可不加。")])]),a("li",null,[a("p",null,"对象类型的函数签名"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token function-variable function"},"logDetails"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token keyword"},"void"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token keyword"},"type"),t(),a("span",{class:"token class-name"},"person"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token function-variable function"},"logDetails"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("ninja"),a("span",{class:"token operator"},":"),t(" person"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("ninja"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),t("ninja"),a("span",{class:"token punctuation"},"."),t("age"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," years old."),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])]),a("p",null,[t("这里，声明了 "),a("code",null,"logDetails"),t(" 首先是个函数，然后它传入一个对象类型的参数。这个函数的返回值是 "),a("code",null,"void"),t("，既没有返回值。")]),a("p",null,"使用类型匿名来简化书写。"),a("p",null,[t("初始化具体函数的时候，参数名不一定与声明时相同（"),a("em",null,"obj"),t(" 只是表明这里有1个参数，取什么名字无所谓，随便取），但是对象类型里的属性的类型一定要相同，然后不能有返回值。")])])],-1),On=a("h1",{id:"dom"},[a("a",{class:"header-anchor",href:"#dom","aria-hidden":"true"},"#"),t(" DOM")],-1),xn=a("h3",{id:"_1-获取dom"},[a("a",{class:"header-anchor",href:"#_1-获取dom","aria-hidden":"true"},"#"),t(" 1.获取DOM")],-1),In=a("p",null,[t("与 "),a("em",null,"JavaScript"),t(" 类似，"),a("em",null,"TypeScript"),t(" 也可直接操作Dom元素，只是稍微有点区别")],-1),_n=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" anchor "),a("span",{class:"token operator"},"="),t(" document"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"a"'),a("span",{class:"token punctuation"},")"),t("\n\n"),a("span",{class:"token comment"},"// 红色波浪线！ 因为typescript并不能确定anchor一定存在。如果不存在anchor就是null。null.href就会报错。typescript不会冒这个险"),t("\n"),a("span",{class:"token comment"},"// console.log(anchor.href)  "),t("\n")])])],-1),$n=a("p",null,"要保证元素存在，有两种方法",-1),Dn=a("ol",null,[a("li",null,[a("p",null,"判断"),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" myAnchor "),a("span",{class:"token operator"},"="),t(" document"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"a"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("myAnchor"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("myAnchor"),a("span",{class:"token punctuation"},"."),t("href"),a("span",{class:"token punctuation"},")"),t("  \n"),a("span",{class:"token punctuation"},"}"),t("\n")])])])]),a("li",null,[a("p",null,[a("strong",null,"!")]),a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" myAnchor "),a("span",{class:"token operator"},"="),t(" document"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"a"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},"!"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("myAnchor"),a("span",{class:"token punctuation"},"."),t("href"),a("span",{class:"token punctuation"},")"),t("\n")])])]),a("p",null,[t("这个 "),a("strong",null,"!"),t(" 的意思是：我，开发员，确定这个元素存在，你，typescript引擎，不用检查了!")])])],-1),Mn=a("h3",{id:"_2-类型转换"},[a("a",{class:"header-anchor",href:"#_2-类型转换","aria-hidden":"true"},"#"),t(" 2.类型转换")],-1),Rn=a("p",null,[t("在获取了元素之后，将鼠标放在变量上，可以发现，这个变量(myAnchor)的类型为 "),a("code",null,"HTMLAnchorElement"),t(" ，表明TS知道这个变量的类型，类似的还有：")],-1),Nn=a("ul",null,[a("li",null,"HTMLInputElement"),a("li",null,"HTMLSelectElement"),a("li",null,"HTMLFormElement"),a("li",null,"........")],-1),An=a("p",null,[t("但是当通过 "),a("code",null,"class"),t("名或者 "),a("code",null,"id"),t(" 名获取元素时，变量的类型就成了 "),a("code",null,"Element")],-1),En=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" input "),a("span",{class:"token operator"},"="),t(" docuemnt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'".myinput"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},"!"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" form "),a("span",{class:"token operator"},"="),t(" docuemnt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"#myform"'),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},"!"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),Un=a("p",null,[t("对此，就需要进行"),a("em",null,"类型转换"),t("（否则无法获取 "),a("em",null,"value"),t(" 等信息）")],-1),Hn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" input "),a("span",{class:"token operator"},"="),t(" docuemnt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'".myinput"'),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token keyword"},"as"),t(" HTMLInputElement"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" form "),a("span",{class:"token operator"},"="),t(" docuemnt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"#myform"'),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token keyword"},"as"),t(" HTMLFormElement"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),Fn=a("p",null,[t("Tips: 元素的"),a("code",null,"valueAsNumber"),t("值可以将输出结果转为 "),a("code",null,"number"),t(" 类型")],-1),Jn=a("h1",{id:"class"},[a("a",{class:"header-anchor",href:"#class","aria-hidden":"true"},"#"),t(" class")],-1),Ln=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// public是默认，不指定就是public。public意味着实例对象也可以访问和修改这个属性"),t("\n    "),a("span",{class:"token comment"},"// private表示私有属性，实例对象不能访问这个属性，只能内部访问"),t("\n    "),a("span",{class:"token comment"},"// readonly表示只读属性，实例对象可以访问这个属性，但是不能修改"),t("\n    "),a("span",{class:"token keyword"},"readonly"),t(" client"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"private"),t(" detailes"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"public"),t(" amount"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n  \n    "),a("span",{class:"token keyword"},"constructor"),a("span",{class:"token punctuation"},"("),t("c"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" d"),a("span",{class:"token operator"},":"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(" a"),a("span",{class:"token operator"},":"),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("client "),a("span",{class:"token operator"},"="),t(" c"),a("span",{class:"token punctuation"},";"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("detailes "),a("span",{class:"token operator"},"="),t(" d"),a("span",{class:"token punctuation"},";"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("amount "),a("span",{class:"token operator"},"="),t(" a"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n\n    "),a("span",{class:"token function"},"format"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("client"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," owes $"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("amount"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," for "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("detailes"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(" invOne "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'work on the mario website'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"200"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"const"),t(" invTwo "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'luigi'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'work on the luigi website'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"300"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token comment"},"// 类似于 let names: string[] = []"),t("\n"),a("span",{class:"token comment"},"// 规定了invoices这个数组中只能存放Invoice的实例"),t("\n"),a("span",{class:"token keyword"},"let"),t(" invoices"),a("span",{class:"token operator"},":"),t(" Invoice"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t("\ninvoices"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),t("invOne"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\ninvoices"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),t("invTwo"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("invoices"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),Pn=a("p",null,"声明类的更简洁的写法：",-1),qn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"{"),t("\n   "),a("span",{class:"token comment"},"// 这种写法属性前面的public是不能省略的"),t("\n    "),a("span",{class:"token keyword"},"constructor"),a("span",{class:"token punctuation"},"("),t("\n      "),a("span",{class:"token keyword"},"readonly"),t(" client"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t("\n      "),a("span",{class:"token keyword"},"private"),t(" detailes"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t("\n      "),a("span",{class:"token keyword"},"public"),t(" amount"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t("\n  \t"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n\n    "),a("span",{class:"token function"},"format"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("client"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," owes $"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("amount"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"}," for "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("detailes"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(" invOne "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'mario'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'work on the mario website'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"200"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"const"),t(" invTwo "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Invoice"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'luigi'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'work on the luigi website'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"300"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),Cn=a("h1",{id:"模块"},[a("a",{class:"header-anchor",href:"#模块","aria-hidden":"true"},"#"),t(" 模块")],-1),Wn=a("p",null,[t("当项目比较大的时候，会希望把一些例如类分离出去，将其 "),a("code",null,"export"),t(" 然后在需要的地方 "),a("code",null,"import"),t(" 进来，这就是模块化。由于模块化是依赖es6的，所以只支持比较新的浏览器，要实现模块化，按以下步骤：")],-1),Bn=a("ol",null,[a("li",null,[t("将 "),a("code",null,"tsconfig.json"),t(" 中的 "),a("code",null,"compilerOptions"),t(" 的 "),a("code",null,"target"),t("改为 "),a("em",null,"es6")]),a("li",null,[t("将 "),a("code",null,"tsconfig.json"),t(" 中的 "),a("code",null,"compilerOptions"),t(" 的 "),a("code",null,"module"),t("改为 "),a("em",null,"es2015")]),a("li",null,[t("将引入JS的 "),a("code",null,"script"),t(" 标签添加 "),a("code",null,'type="module"')]),a("li",null,[t("export & import 工作。注：import时后缀要写 "),a("code",null,".js"),t(" 而不是 "),a("code",null,".ts"),t(" 。因为编译后引入的是 "),a("code",null,".js")])],-1),Xn=a("h1",{id:"接口"},[a("a",{class:"header-anchor",href:"#接口","aria-hidden":"true"},"#"),t(" 接口")],-1),zn=a("p",null,[t("接口(interface)是TypeScript有的而JavaScript没有的，用来规定对象拥有的属性及其类型，通过 "),a("strong",null,"interface"),t(" 关键词来声明")],-1),Kn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 定义了一个Person接口，规定了要实现这个接口，就必须有2个属性和2个方法\t"),t("\n"),a("span",{class:"token keyword"},"interface"),t(),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"{"),t("\n  name"),a("span",{class:"token operator"},":"),t(" sting"),a("span",{class:"token punctuation"},";"),t("\n  age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n  "),a("span",{class:"token function"},"speak"),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token keyword"},"void"),a("span",{class:"token punctuation"},";"),t("\n  "),a("span",{class:"token function"},"spend"),a("span",{class:"token punctuation"},"("),t("a"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Vn=a("p",null,"实现接口",-1),Gn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 无初始化"),t("\n"),a("span",{class:"token keyword"},"let"),t(" him"),a("span",{class:"token operator"},":"),t(" Person"),a("span",{class:"token punctuation"},";"),t("\n\n"),a("span",{class:"token comment"},"// 初始化"),t("\n"),a("span",{class:"token keyword"},"let"),t(" me"),a("span",{class:"token operator"},":"),t(" Person "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n  name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},","),t("\n  age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},","),t("\n  "),a("span",{class:"token function"},"speak"),a("span",{class:"token punctuation"},"("),t("text"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"void"),a("span",{class:"token punctuation"},"{"),t("\n  \t"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("text"),a("span",{class:"token punctuation"},")"),t("\n\t"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n  "),a("span",{class:"token function"},"spend"),a("span",{class:"token punctuation"},"("),t("money"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"I spent "'),a("span",{class:"token punctuation"},","),t(" money"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" money\n  "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Qn=a("p",null,[t("类实现接口: "),a("strong",null,"implements")],-1),Yn=a("p",null,[t("例子：如下接口简单地规定了实现这个接口需要有个 "),a("em",null,"format"),t(" 函数，无参数，返回一个 "),a("em",null,"string"),t(" 类型的值")],-1),Zn=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 定义接口"),t("\n"),a("span",{class:"token keyword"},"interface"),t(),a("span",{class:"token class-name"},"HasFormatter"),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token function"},"format"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 类实现接口"),t("\n"),a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Workder"),t(),a("span",{class:"token keyword"},"implements"),t(),a("span",{class:"token class-name"},"HasFormatter"),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token keyword"},"constructor"),a("span",{class:"token punctuation"},"("),t("\n  \t"),a("span",{class:"token keyword"},"public"),t(" name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token keyword"},"private"),t(" salary"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),t("\n  "),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n  "),a("span",{class:"token comment"},"// 一定要有一个 format 函数"),t("\n  "),a("span",{class:"token function"},"format"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token string"},"'s salary is "),a("span",{class:"token interpolation"},[a("span",{class:"token interpolation-punctuation punctuation"},"${"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("salary"),a("span",{class:"token interpolation-punctuation punctuation"},"}")]),a("span",{class:"token template-punctuation string"},"`")]),t("\n  "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),ns=a("h1",{id:"泛型"},[a("a",{class:"header-anchor",href:"#泛型","aria-hidden":"true"},"#"),t(" 泛型")],-1),ss=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"addUID"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token operator"},":"),t(" object"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" uid "),a("span",{class:"token operator"},"="),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"floor"),a("span",{class:"token punctuation"},"("),t("Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"random"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"*"),t(),a("span",{class:"token number"},"100"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token operator"},"..."),t("obj"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"let"),t(" docOne "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"addUID"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'yoshi'"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"40"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("docOne"),a("span",{class:"token punctuation"},")"),t("\n "),a("span",{class:"token comment"},"// console.log(docOne.name)  // 红色波浪线！ "),t("\n")])])],-1),as=a("p",null,[t("这个函数返回一个由 原对象+uid属性对 组成的新对象，当我们试图访问 "),a("code",null,"docOne.name"),t(" 时，ts引擎会报错，因为在声明 "),a("code",null,"addUID"),t(" 时只说明了要传入一个 "),a("em",null,"object"),t(" ，并没有明确地指明其中的属性值，所以无法访问。作如下修改：")],-1),ts=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(" addUID "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token constant"},"T"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" uid "),a("span",{class:"token operator"},"="),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"floor"),a("span",{class:"token punctuation"},"("),t("Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"random"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"*"),t(),a("span",{class:"token number"},"100"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token operator"},"..."),t("obj"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"let"),t(" docOne "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"addUID"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'yoshi'"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"40"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("docOne"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t("  "),a("span",{class:"token comment"},"// yoshi"),t("\n")])])],-1),os=a("p",null,"将传入的值类型改为了泛型，就可以了(Beacuse this is going to be whatever type that we specify when we create an object which implements this interface）， 有点像运行时上下文的感觉。",-1),es=a("p",null,[t("其中的 "),a("code",null,"<T>"),t("和 "),a("code",null,"T"),t(" 只是约定俗称，也可以用其他的比如 "),a("code",null,"<X>"),t("和 "),a("code",null,"X"),t(" ，只是两个要相同。")],-1),cs=a("p",null,[t("但是这样就出现了一个问题，那就是参数没有指定是 "),a("code",null,"object"),t(" 类型，也就是说可以是任何类型，这样子明显是有问题的，如:")],-1),ps=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" docTwo "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"addUID"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"hello"'),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),ls=a("p",null,[t("这明显不合逻辑，因此需要在是泛型的同时又需要指定传入的参数得是 "),a("code",null,"object"),t(" 类型：")],-1),us=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 指定传入的参数得是object"),t("\n"),a("span",{class:"token keyword"},"const"),t(" addUID "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),t(),a("span",{class:"token keyword"},"extends"),t(),a("span",{class:"token class-name"},"object"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token constant"},"T"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" uid "),a("span",{class:"token operator"},"="),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"floor"),a("span",{class:"token punctuation"},"("),t("Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"random"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"*"),t(),a("span",{class:"token number"},"100"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token operator"},"..."),t("obj"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 更明确地指明传入的object的结构: 比如得有一个name属性，类型为string。 也可以有其他属性，但是name属性必须有"),t("\n"),a("span",{class:"token keyword"},"const"),t(" addUID "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),t(),a("span",{class:"token keyword"},"extends"),t(),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token constant"},"T"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" uid "),a("span",{class:"token operator"},"="),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"floor"),a("span",{class:"token punctuation"},"("),t("Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"random"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"*"),t(),a("span",{class:"token number"},"100"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token operator"},"..."),t("obj"),a("span",{class:"token punctuation"},","),t(" uid"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token keyword"},"let"),t(" docOne "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"addUID"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'yoshi'"),a("span",{class:"token punctuation"},","),t(" age"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"40"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("docOne"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t("  "),a("span",{class:"token comment"},"// yoshi"),t("\n"),a("span",{class:"token builtin"},"console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("docOne"),a("span",{class:"token punctuation"},"."),t("age"),a("span",{class:"token punctuation"},")"),t("  "),a("span",{class:"token comment"},"// 40"),t("\n")])])],-1),is=a("h3",{id:"接口中的泛型"},[a("a",{class:"header-anchor",href:"#接口中的泛型","aria-hidden":"true"},"#"),t(" 接口中的泛型")],-1),ks=a("p",null,"当我们要声明一个接口，但是其中的一个属性还不能确定或可以根据具体情况改变时，就可以用到泛型。",-1),rs=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 指定泛型  注意位置是在后面的"),t("\n"),a("span",{class:"token keyword"},"interface"),t(),a("span",{class:"token class-name"},[t("Resource"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">")]),a("span",{class:"token punctuation"},"{"),t("\n  uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n  resourceName"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},";"),t("\n  data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token constant"},"T"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),ds=a("p",null,"指定了之后，实现时就可以根据需求来改变",-1),ms=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 指定为string类型"),t("\n"),a("span",{class:"token keyword"},"const"),t(" resourceOne"),a("span",{class:"token operator"},":"),t(" Resource"),a("span",{class:"token operator"},"<"),a("span",{class:"token builtin"},"string"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n  uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t("\n  resourceName"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},","),t("\n  data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'2021'"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 指定为object类型"),t("\n"),a("span",{class:"token keyword"},"const"),t(" resourceOne"),a("span",{class:"token operator"},":"),t(" Resource"),a("span",{class:"token operator"},"<"),t("object"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n  uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t("\n  resourceName"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},","),t("\n  data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("time"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'now'"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 指定为string的array类型"),t("\n"),a("span",{class:"token keyword"},"const"),t(" resourceOne"),a("span",{class:"token operator"},":"),t(" Resource"),a("span",{class:"token operator"},"<"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n  uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t("\n  resourceName"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},","),t("\n  data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'2021'"),a("span",{class:"token punctuation"},"]"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),gs=a("h1",{id:"枚举类型"},[a("a",{class:"header-anchor",href:"#枚举类型","aria-hidden":"true"},"#"),t(" 枚举类型")],-1),bs=a("p",null,[t("枚举类型通过 "),a("code",null,"enum"),t(" 关键词来定义，完整的是 **"),a("code",null,"enum"),t(" + 名字 + {...} **")],-1),ys=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"enum"),t(" EnumVariableName "),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("  "),a("span",{class:"token comment"},"// 名字后面直接跟{...}， 没有等号"),t("\n")])])],-1),hs=a("p",null,"修改之前的例子：",-1),fs=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 定义一个枚举类型变量"),t("\n"),a("span",{class:"token keyword"},"enum"),t(" ResourceType "),a("span",{class:"token punctuation"},"{"),t(),a("span",{class:"token constant"},"BOOK"),a("span",{class:"token punctuation"},","),t("  "),a("span",{class:"token constant"},"AUTHOR"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token constant"},"FILE"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token constant"},"DIRECTOR"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token constant"},"PERSON"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 规定resourceName的类型是定义好的枚举类型变量ResourceType"),t("\n"),a("span",{class:"token keyword"},"interface"),t(),a("span",{class:"token class-name"},[t("Resource"),a("span",{class:"token operator"},"<"),a("span",{class:"token constant"},"T"),a("span",{class:"token operator"},">")]),a("span",{class:"token punctuation"},"{"),t("\n    uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},";"),t("\n    resourceName"),a("span",{class:"token operator"},":"),t(" ResourceType"),a("span",{class:"token punctuation"},";"),t("\n    data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token constant"},"T"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 实例化时，resourceName的值只能从ResourceType中取"),t("\n"),a("span",{class:"token keyword"},"const"),t(" resourceOne"),a("span",{class:"token operator"},":"),t(" Resource"),a("span",{class:"token operator"},"<"),t("object"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n    uid"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t("\n    resourceName"),a("span",{class:"token operator"},":"),t(" ResourceType"),a("span",{class:"token punctuation"},"."),a("span",{class:"token constant"},"AUTHOR"),a("span",{class:"token punctuation"},","),t("\n    data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("time"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'now'"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),ws=a("h1",{id:"tuple"},[a("a",{class:"header-anchor",href:"#tuple","aria-hidden":"true"},"#"),t(" tuple")],-1),vs=a("p",null,"TS中，元组(tuple)和数组(array)的最大区别在于：",-1),js=a("ul",null,[a("li",null,"array可以修改任意位置的元素成array中规定可以储存的元素"),a("li",null,"tuple一旦元素的位置和类型确定了，则那个位置的元素就无法修改成其他类型的元素")],-1),Ts=a("p",null,"tuple声明：",-1),Ss=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 与array不同，声明时必须指定每个位置的数据类型"),t("\n"),a("span",{class:"token keyword"},"let"),t(" tup"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token builtin"},"number"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token builtin"},"boolean"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t(" \n\n"),a("span",{class:"token comment"},"// 声明时直接给值"),t("\n"),a("span",{class:"token comment"},"// let tup: [string, number, boolean] = ['oneo', 20, true]；"),t("\n")])])],-1),Os=a("p",null,"tuple初始化:",-1),xs=a("div",{class:"language-typescript"},[a("pre",null,[a("code",null,[t("tup "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'oneo'"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t("\ntup"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'sanchez'"),a("span",{class:"token punctuation"},";"),t("  "),a("span",{class:"token comment"},"// 可以，因为修改过后的类型也是string"),t("\n"),a("span",{class:"token comment"},"// tup[1] = '20';   // 红色波浪线！ 因为修改过后的类型不是number"),t("\n")])])],-1);e.render=function(a,t,o,e,Is,_s){return n(),s("div",null,[c,p,l,u,i,k,r,d,m,g,b,y,h,f,w,v,j,T,S,O,x,I,_,$,D,M,R,N,A,E,U,H,F,J,L,P,q,C,W,B,X,z,K,V,G,Q,Y,Z,nn,sn,an,tn,on,en,cn,pn,ln,un,kn,rn,dn,mn,gn,bn,yn,hn,fn,wn,vn,jn,Tn,Sn,On,xn,In,_n,$n,Dn,Mn,Rn,Nn,An,En,Un,Hn,Fn,Jn,Ln,Pn,qn,Cn,Wn,Bn,Xn,zn,Kn,Vn,Gn,Qn,Yn,Zn,ns,ss,as,ts,os,es,cs,ps,ls,us,is,ks,rs,ds,ms,gs,bs,ys,hs,fs,ws,vs,js,Ts,Ss,Os,xs])};export default e;export{o as __pageData};
