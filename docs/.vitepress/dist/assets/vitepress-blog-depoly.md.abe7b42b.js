import{o as l,c as n,d as s,e}from"./app.52a172e3.js";const t='{"title":"部署","description":"","frontmatter":{},"headers":[{"level":2,"title":"先本地测试下","slug":"先本地测试下"},{"level":2,"title":"GitHub Pages","slug":"github-pages"}],"relativePath":"vitepress-blog-depoly.md","lastUpdated":1616740252619}',a={},o=s("h1",{id:"部署"},[s("a",{class:"header-anchor",href:"#部署","aria-hidden":"true"},"#"),e(" 部署")],-1),i=s("p",null,"首先确保：",-1),u=s("ul",null,[s("li",null,[e("项目根目录下有"),s("code",null,"docs"),e("文件夹")]),s("li",null,[e("打包编译后的默认位置是"),s("code",null,".vitepress/dist"),e("(默认就会是在这里，只要你没有乱动过)")]),s("li",null,"VitePress作为本地依赖项安装在项目中")],-1),c=s("h2",{id:"先本地测试下"},[s("a",{class:"header-anchor",href:"#先本地测试下","aria-hidden":"true"},"#"),e(" 先本地测试下")],-1),r=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[e("$ "),s("span",{class:"token function"},"npm"),e(" run docs:build\n")])])],-1),p=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[e("$ "),s("span",{class:"token function"},"npm"),e(" run docs:serve\n")])])],-1),d=s("p",null,[e("第一条命令会打包项目，在"),s("code",null,"/docs/.vitepress"),e("下生成一个"),s("code",null,"dist"),e("文件夹，里面就是被打包好的项目文件。")],-1),g=s("p",null,"第二条命令会启动一个本地服务器，这是检查打包之后的项目在你的本地环境中看起来是否正常的一种简单方法。",-1),h=s("h2",{id:"github-pages"},[s("a",{class:"header-anchor",href:"#github-pages","aria-hidden":"true"},"#"),e(" GitHub Pages")],-1),m=s("p",null,[e("首先在你项目的根目录下创建"),s("code",null,"deploy.sh"),e("文件，输入以下内容(高亮标注的注释需要根据自己的情况取消注释并修改)：")],-1),b=s("div",{class:"language-shell"},[s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlighted"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlighted"}," "),s("br"),s("br"),s("div",{class:"highlighted"}," "),s("br"),s("br")]),s("pre",null,[s("code",null,[s("span",{class:"token shebang important"},"#!/usr/bin/env sh"),e("\n"),s("span",{class:"token comment"},"# 告诉操作系统执行这个脚本的时候，调用/usr/bin下的sh解释器"),e("\n\n"),s("span",{class:"token comment"},"# 出错时中止"),e("\n"),s("span",{class:"token builtin class-name"},"set"),e(" -e\n\n"),s("span",{class:"token comment"},"# 打包编译"),e("\n"),s("span",{class:"token function"},"npm"),e(" run docs:build\n\n"),s("span",{class:"token comment"},"# 到dist目录下"),e("\n"),s("span",{class:"token builtin class-name"},"cd"),e(" docs/.vitepress/dist\n\n"),s("span",{class:"token comment"},"# 如果要部署到自定义域"),e("\n"),s("span",{class:"token comment"},"# echo 'www.example.com' > CNAME"),e("\n\n"),s("span",{class:"token function"},"git"),e(" init\n"),s("span",{class:"token function"},"git"),e(),s("span",{class:"token function"},"add"),e(" -A\n"),s("span",{class:"token function"},"git"),e(" commit -m "),s("span",{class:"token string"},"'deploy'"),e("\n\n"),s("span",{class:"token comment"},"# 如果要部署到 https://<USERNAME>.github.io"),e("\n"),s("span",{class:"token comment"},"# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master"),e("\n\n"),s("span",{class:"token comment"},"# 如果要部署到 https://<USERNAME>.github.io/<REPO>"),e("\n"),s("span",{class:"token comment"},"# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages"),e("\n\n"),s("span",{class:"token builtin class-name"},"cd"),e(" -\n")])])],-1),k=s("blockquote",null,[s("p",null,"创建.github.io的教程自行google")],-1),v=s("p",null,"接下来正常来说只要运行这个文件就能部署了",-1),f=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[e("Windows：打开Git Bash，输入"),s("code",null,"bash deploy.sh")]),s("p",null,[e("Mac： 打开terminal，输入"),s("code",null,"bash depoly.sh")])],-1),E=s("p",null,"如果你到这就成功了---\x3e🎉 🎉 🎉",-1),A=s("p",null,[e("但当我如上部署之后，噢吼，问题来了 👻，我的.github.io上就一个大写的"),s("code",null,"<username>.github.io"),e("链接，我那么大的Hello World呢？我在这里被卡了2个小时。")],-1),M=s("p",null,[e("要解决问题，就先仔细看看"),s("code",null,"depoly.sh"),e("文件。其实这就是一个自动化部署的脚本，你要是不嫌麻烦，完全可以每次部署前都从"),s("code",null,"set -e"),e("开始一句一句手动输入。先是打包编译项目到"),s("code",null,"dist"),e("文件夹下，接着进入到"),s("code",null,"dist"),e("目录，然后初始化仓库并将"),s("code",null,"dist"),e("提交到本地仓库。接下来一句是关键")],-1),R=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[e("$ "),s("span",{class:"token function"},"git"),e(" push -f git@github.com:"),s("span",{class:"token operator"},"<"),e("USERNAME"),s("span",{class:"token operator"},">"),e("/"),s("span",{class:"token operator"},"<"),e("USERNAME"),s("span",{class:"token operator"},">"),e(".github.io.git master\n")])])],-1),S=s("p",null,[s("em",null,"git push"),e(" 命令用于从将本地的分支版本上传到远程(这里是"),s("em",null,[s("strong",null,"master")]),e(")并合并。当远程默认分支为"),s("em",null,[s("strong",null,"main")]),e("时，这个命令会创建另一个远程分支叫做"),s("em",null,[s("strong",null,"master")]),e("。也就是说,"),s("code",null,"dist"),e("文件其实是被上传到了"),s("em",null,[s("strong",null,"master")]),e("分支上。打开github上的仓库，点击"),s("em",null,"Settings")],-1),N=s("p",null,[s("img",{src:"/assets/blog-1.40b45e6e.jpg",alt:"settings"})],-1),P=s("p",null,[e("往下滑，找到"),s("em",null,"GitHub Pages"),e("，并选择"),s("em",null,"Source"),e("的分支为"),s("em",null,[s("strong",null,"master")]),e("，根路径根据自己要求选择")],-1),U=s("p",null,[s("img",{src:"/assets/blog-2.834c5b2b.jpg",alt:"pages"})],-1),y=s("p",null,[e("完成之后，重新跑一遍"),s("code",null,"deploy.sh"),e("脚本，大功告成！")],-1);a.render=function(s,e,t,a,w,x){return l(),n("div",null,[o,i,u,c,r,p,d,g,h,m,b,k,v,f,E,A,M,R,S,N,P,U,y])};export default a;export{t as __pageData};
