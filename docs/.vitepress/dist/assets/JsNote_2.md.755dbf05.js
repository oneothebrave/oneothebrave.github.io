import{o as s,c as n,a}from"./app.53f66af6.js";const t='{"title":"【第二章】HTML中的JavaScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 <script>元素","slug":"_2-1-script-元素"},{"level":3,"title":"2.1.1 标签位置","slug":"_2-1-1-标签位置"},{"level":3,"title":"2.1.2 动态加载脚本","slug":"_2-1-2-动态加载脚本"},{"level":2,"title":"2.3 <noscript>元素","slug":"_2-3-noscript-元素"}],"relativePath":"JsNote/2.md","lastUpdated":1616751893623}',p={},o=a('<h1 id="【第二章】html中的javascript"><a class="header-anchor" href="#【第二章】html中的javascript" aria-hidden="true">#</a> 【第二章】HTML中的JavaScript</h1><h2 id="_2-1-script-元素"><a class="header-anchor" href="#_2-1-script-元素" aria-hidden="true">#</a> 2.1 <code>&lt;script&gt;</code>元素</h2><p><em><strong>script元素有以下属性：</strong></em></p><ul><li><p><strong>async</strong>: 可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效.类似于<strong>defer</strong>，区别是第一个设置<strong>async</strong>的<code>&lt;/script&gt;</code>会在最后执行</p></li><li><p><strong>crossorigin</strong>: 可选。配置相关请求的<em>CORS</em>（跨源资源共享）设置。默认不使用。</p><p>crossorigin= &quot;anonymous&quot; 配置文件请求不必设置凭据标志。</p><p>crossorigin=&quot;use-credentials&quot; 设置凭据标志，意味着出站请求会包含凭据</p></li><li><p><strong>defer</strong>：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。相当于告诉浏览器，立即下载，但延迟执行。</p><p>会在浏览器解析到结束的<code>&lt;html&gt;</code>标签之后，在DOMContentLodaded事件之前执行。最好只包含一个<strong>defer</strong></p></li><li><p>integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性</p></li><li><p><strong>src</strong>：可选。表示包含要执行的代码的外部文件</p></li><li><p>type：可选.表示代码块中脚本语言的内容类型（也称 MIME 类型）.一般是&quot;text/javascript&quot;。</p><p>如果这个值是 <em>module</em>，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 <em>import</em> 和 <em>export</em> 关键字。</p></li></ul><p><em><strong>使用<code>&lt;script&gt;</code>的方式有两种：</strong></em></p><ol><li><p><code>&lt;script&gt;代码块&lt;/script&gt;</code></p><p>代码块中的代码会被从上到下解释，其中的对象(JS中万物皆对象)会被保存在解释器环境中。在代码块跑完之前，页面的其余内容不会被加载，显示。代码块中不能出现<code>&lt;/script&gt;</code>不然会被报错。一定要使用的话就进行转义<code>&lt;\\/script&gt;</code></p></li><li><p><code>&lt;script src=&quot;外部js文件地址&quot; /&gt;</code></p><p>在解释外部js文件时，页面也会被阻塞。请求外部js文件时，该文件的地址可以与这个<em>HTML</em>文件不在同一个域，浏览器在解析这个资源时，会向 <em>src</em> 属性指定的路径发送一个 GET 请求，以取得相应资源。假定是一个 JavaScript 文件。这个初始的请求不受浏览器同源策略限制，但返回并被执行的 JavaScript 则受限制。</p><p>大概就是说<strong>可以向外部域请求js文件，但是返回的js代码中如果也有某段代码是向外部域发送请求，则会被限制</strong>。浏览器会按照<code>&lt;script&gt;</code>在页面中出现的顺序依次解释它们，前提是它们没有使用 <em>defer</em> 和 <em>async</em> 属性。</p><p><em><strong>推荐使用这种方式</strong></em>。理由：</p><ul><li>可维护性</li><li>缓存：浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次</li><li>适应未来</li></ul></li></ol><h3 id="_2-1-1-标签位置"><a class="header-anchor" href="#_2-1-1-标签位置" aria-hidden="true">#</a> 2.1.1 标签位置</h3><p>由于页面在浏览器解析到<code>&lt;body&gt;</code>的起始标签时开始渲染，所以对于需要很多 JavaScript 的页面，<code>&lt;script&gt;</code>标签放在<code>&lt;body&gt;</code>元素中的页面内容的后面</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    /*页面内容*/\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>这样就不会导致页面渲染的明显延迟</p><h3 id="_2-1-2-动态加载脚本"><a class="header-anchor" href="#_2-1-2-动态加载脚本" aria-hidden="true">#</a> 2.1.2 动态加载脚本</h3><p>因为JavaScript可以使用DOM API，所以通过向 DOM 中动态添加 script 元素同样可以加载指定的脚本</p><div class="language-js"><pre><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nscript<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span> \nscript<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 默认就是异步的，可以不写。要想统一动态脚本的加载行为，可以明确将其设置为同步</span>\ndocument<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>以这种方式获取的资源对浏览器预加载器是不可见的，会严重影响它们在资源获取队列中的优先级，要想让预加载器知道这些动态请求文件的存在，可以在文档头部显式声明：</p><p><code>&lt;link rel=&quot;preload&quot; href=&quot;gibberish.js&quot;&gt;</code></p><h2 id="_2-3-noscript-元素"><a class="header-anchor" href="#_2-3-noscript-元素" aria-hidden="true">#</a> 2.3 <code>&lt;noscript&gt;</code>元素</h2><p>在下列任一种情况下，浏览器将显示包含在<code>&lt;noscript&gt;</code>中的内容：</p><ul><li>浏览器不支持脚本</li><li>浏览器对脚本的支持被关闭</li></ul><p>一个例子：</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Example HTML Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This page requires a JavaScript-enabled browser.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',20);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
